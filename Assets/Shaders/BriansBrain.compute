#pragma kernel Init
#pragma kernel Iterate
#pragma kernel ApplyBuffer

RWTexture2D<float4> Result;
sampler2D GridBuffer;
float Resolution;
float DecayStep;

float random(float2 uv)
{
    return frac(sin(dot(uv, float2(12.9898, 78.233))) * 43758.5453);
}

[numthreads(8,8,1)]
void Init(uint3 id : SV_DispatchThreadID)
{
    float value = random(id.xy);
    
    if (value < 0.5) value = 0;
    else if (value < 0.75) value = 0.5;
    else value = 1;

    Result[id.xy] = value;
}

[numthreads(8,8,1)]
void Iterate(uint3 id : SV_DispatchThreadID)
{
    float4 pos = float4(id.x / Resolution, id.y / Resolution, 0, 0);
    float state = tex2Dlod(GridBuffer, pos).r;
    float delta = 1.0 / Resolution;

    float onNeighbours = 0;
    onNeighbours += step(0.9, tex2Dlod(GridBuffer, pos + float4(-delta, -delta, 0, 0)).x);
    onNeighbours += step(0.9, tex2Dlod(GridBuffer, pos + float4(-delta, 0, 0, 0)).x);
    onNeighbours += step(0.9, tex2Dlod(GridBuffer, pos + float4(-delta, delta, 0, 0)).x);
    onNeighbours += step(0.9, tex2Dlod(GridBuffer, pos + float4(0, delta, 0, 0)).x);
    onNeighbours += step(0.9, tex2Dlod(GridBuffer, pos + float4(delta, delta, 0, 0)).x);
    onNeighbours += step(0.9, tex2Dlod(GridBuffer, pos + float4(delta, 0, 0, 0)).x);
    onNeighbours += step(0.9, tex2Dlod(GridBuffer, pos + float4(delta, -delta, 0, 0)).x);
    onNeighbours += step(0.9, tex2Dlod(GridBuffer, pos + float4(0, -delta, 0, 0)).x);

    if (state < 0.1 && onNeighbours == 2)
    {
        // "Off" cell with 2 "on" neighbours goes alive.
        state = 1;
    }
    else
    {
        // "On" and "dying" cells decay each iteration ("on" become "dying", "dying become "off").
        state -= 0.5;
    }
    
    Result[id.xy] = float4(state.xxx, 1);
}

[numthreads(8,8,1)]
void ApplyBuffer(uint3 id : SV_DispatchThreadID)
{
    float4 pos = float4(id.x / Resolution, id.y / Resolution, 0, 0);
    float4 buffer = tex2Dlod(GridBuffer, pos);
    Result[id.xy] = buffer;
}