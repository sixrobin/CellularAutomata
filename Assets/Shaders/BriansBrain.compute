#pragma kernel Init
#pragma kernel Iterate
#pragma kernel ApplyBuffer

// https://en.wikipedia.org/wiki/Brian%27s_Brain

#include "CellularAutomaton.cginc"
#include "Random.cginc"

[numthreads(8,8,1)]
void Init(uint3 id : SV_DispatchThreadID)
{
    float value = random(id.xy);
    
    if (value < 0.5) value = 0;
    else if (value < 0.75) value = 0.5;
    else value = 1;

    Result[id.xy] = value;
}

[numthreads(8,8,1)]
void Iterate(uint3 id : SV_DispatchThreadID)
{
    float4 pos = float4(id.x / Resolution, id.y / Resolution, 0, 0);
    int neighbours = computeNeighboursCount(pos);
    float state = tex2Dlod(GridBuffer, pos).r;

    if (state < 0.1 && neighbours == 2)
        state = 1; // "Off" cell with 2 "on" neighbours goes alive.
    else
        state -= 0.5; // "On" and "dying" cells decay each iteration ("on" become "dying", "dying become "off").
    
    Result[id.xy] = float4(state.xxx, 1);
}

[numthreads(8,8,1)]
void ApplyBuffer(uint3 id : SV_DispatchThreadID)
{
    float4 pos = float4(id.x / Resolution, id.y / Resolution, 0, 0);
    float4 buffer = tex2Dlod(GridBuffer, pos);
    Result[id.xy] = buffer;
}