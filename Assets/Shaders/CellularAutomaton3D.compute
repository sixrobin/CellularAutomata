#pragma kernel Init
#pragma kernel Next
#pragma kernel PrepareBuffer
#pragma kernel ApplyBuffer

#include "CellularAutomaton.cginc"
#include "Random.cginc"

struct Cube
{
    float3 Position;
    int State;
};

RWStructuredBuffer<Cube> _CubesBuffer;
RWStructuredBuffer<Cube> _Cubes;

int GetUID(uint3 id)
{
    return id.x + (id.y * _Resolution) + (id.z * _Resolution * _Resolution);
}

int GetNeighbourNormalizedState(int3 neighbourID)
{
    if (neighbourID.x >= _Resolution || neighbourID.y >= _Resolution || neighbourID.z >= _Resolution)
        return 0;
                
    Cube neighbour = _Cubes[GetUID(neighbourID)];
    return neighbour.State == _Rules.z - 1 ? 1 : 0;
}

int ComputeMooreNeighboursCount(uint3 id)
{
    int neighboursCount = 0;

    for (int x = -1; x <= 1; ++x)
        for (int y = -1; y <= 1; ++y)
            for (int z = -1; z <= 1; ++z)
                if (x != 0 || y != 0 || z != 0)
                    neighboursCount += GetNeighbourNormalizedState(id + int3(x,y,z));

    return neighboursCount;
}

int ComputeNeumannNeighboursCount(uint3 id)
{
    int neighboursCount = 0;

    neighboursCount += GetNeighbourNormalizedState(id - int3(1,0,0));
    neighboursCount += GetNeighbourNormalizedState(id + int3(1,0,0));
    neighboursCount += GetNeighbourNormalizedState(id - int3(0,1,0));
    neighboursCount += GetNeighbourNormalizedState(id + int3(0,1,0));
    neighboursCount += GetNeighbourNormalizedState(id - int3(0,0,1));
    neighboursCount += GetNeighbourNormalizedState(id + int3(0,0,1));
    
    return neighboursCount;
}

[numthreads(8,8,8)]
void Init(uint3 id : SV_DispatchThreadID)
{
    float halfResolution = _Resolution * 0.5;
    int state = step(random(id), _InitRandomStep);

    uint uid = GetUID(id);
    _Cubes[uid].Position = id;

    if (state == 1) // If state is alive, apply distance to center filter.
    {
        int3 sid = id; // Use signed ID to avoid console warnings.

        if (_InitCenterWidth == 1)
        {
            _Cubes[uid].State = sid.x == halfResolution && sid.y == halfResolution && sid.z == halfResolution ? _Rules.z - 1 : 0;
        }
        else
        {
            float halfInitCenterWidth = ceil(_InitCenterWidth * 0.5);
            _Cubes[uid].State = sid.x > halfResolution - halfInitCenterWidth
                                && sid.x < halfResolution + halfInitCenterWidth
                                && sid.y > halfResolution - halfInitCenterWidth
                                && sid.y < halfResolution + halfInitCenterWidth
                                && sid.z > halfResolution - halfInitCenterWidth
                                && sid.z < halfResolution + halfInitCenterWidth ? _Rules.z - 1 : 0;
        }
    }
}

[numthreads(8,8,8)]
void Next(uint3 id : SV_DispatchThreadID)
{
    int uid = GetUID(id);
    Cube cube = _Cubes[uid];
    
    int neighbours = _Rules.w == 0 ? ComputeMooreNeighboursCount(id) : ComputeNeumannNeighboursCount(id);
    neighbours = pow(2, neighbours);

    if (cube.State == 0) // Dead.
    {
        if ((neighbours & _Rules.y) != 0 && _Rules.y > -1)
            _CubesBuffer[uid].State = _Rules.z - 1;
    }
    else if (cube.State == _Rules.z - 1) // Alive
    {
        if ((neighbours & _Rules.x) == 0 && _Rules.x > -1)
            _CubesBuffer[uid].State--;
    }
    else // Dying.
    {
        _CubesBuffer[uid].State--;
    }
}

[numthreads(8,8,8)]
void PrepareBuffer(uint3 id : SV_DispatchThreadID)
{
    int uid = GetUID(id);
    _CubesBuffer[uid] = _Cubes[uid];
}

[numthreads(8,8,8)]
void ApplyBuffer(uint3 id : SV_DispatchThreadID)
{
    int uid = GetUID(id);
    _Cubes[uid] = _CubesBuffer[uid];
}
