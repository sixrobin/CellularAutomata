#pragma kernel Init
#pragma kernel Next
#pragma kernel ApplyBuffer

#include "CellularAutomaton2D.cginc"
#include "Random.cginc"

[numthreads(8,8,1)]
void Init(uint3 id : SV_DispatchThreadID)
{
    float halfResolution = _Resolution * 0.5;
    int state = step(random(id), _InitRandomStep);

    if (state == 1) // If state is alive, apply distance to center filter.
    {
        int3 sid = id; // Use signed ID to avoid console warnings.

        if (_InitCenterWidth == 1)
        {
            state = sid.x == halfResolution && sid.y == halfResolution ? _Rules.z - 1 : 0;
        }
        else
        {
            float halfInitCenterWidth = ceil(_InitCenterWidth * 0.5);
            state = sid.x > halfResolution - halfInitCenterWidth
                    && sid.x < halfResolution + halfInitCenterWidth
                    && sid.y > halfResolution - halfInitCenterWidth
                    && sid.y < halfResolution + halfInitCenterWidth ? _Rules.z - 1 : 0;
        }
    }

    _Result[id.xy] = float4(state.xxx, 1);
}

[numthreads(8,8,1)]
void Next(uint3 id : SV_DispatchThreadID)
{
    float4 uv = GetUV(id);
    int neighbours = _Rules.w == 0 ? ComputeMooreNeighboursCount(uv) : ComputeNeumannNeighboursCount(uv);
    float state = tex2Dlod(_GridBuffer, uv).r;

    // Modify neighbours count using 2^n formula to make it comparable with the rules, using a AND operator.
    neighbours = pow(2, neighbours);
    
    if (state < 1) // Dead.
    {
        if ((neighbours & _Rules.x) != 0 && _Rules.x > -1)
            state = 1;
        else
            state -= _DecayStep;
    }
    else // Alive.
    {
        if ((neighbours & _Rules.y) != 0 && _Rules.y > -1)
            state = 1;
        else
            state -= _DecayStep;
    }
    
    _Result[id.xy] = float4(state.xxx, 1);
}

[numthreads(8,8,1)]
void ApplyBuffer(uint3 id : SV_DispatchThreadID)
{
    ApplyBuffer(id.xy);
}