#pragma kernel Init
#pragma kernel Next
#pragma kernel ApplyBuffer

#include "CellularAutomaton2D.cginc"
#include "Random.cginc"

float _InitRandomStep;

[numthreads(8,8,1)]
void Init(uint3 id : SV_DispatchThreadID)
{
    _Result[id.xy] = float4(step(random(id.xy), _InitRandomStep).xxx, 1);
}

[numthreads(8,8,1)]
void Next(uint3 id : SV_DispatchThreadID)
{
    float4 pos = float4(id.x / _Resolution, id.y / _Resolution, 0, 0);
    int neighbours = _Rules.w == 0 ? ComputeMooreNeighboursCount(pos) : ComputeNeumannNeighboursCount(pos);
    float state = tex2Dlod(_GridBuffer, pos).r;

    // Modify neighbours count using 2^n formula to make it comparable with the rules, using a AND operator.
    neighbours = pow(2, neighbours);
    
    if (state < 1) // Dead.
    {
        if ((neighbours & _Rules.x) != 0 && _Rules.x > -1)
            state = 1;
        else
            state -= _DecayStep;
    }
    else // Alive.
    {
        if ((neighbours & _Rules.y) != 0 && _Rules.y > -1)
            state = 1;
        else
            state -= _DecayStep;
    }
    
    _Result[id.xy] = float4(state.xxx, 1);
}

[numthreads(8,8,1)]
void ApplyBuffer(uint3 id : SV_DispatchThreadID)
{
    ApplyBuffer(id.xy);
}